// src/context/DataContext.js
import React, { createContext, useState, useEffect, useContext } from "react";
import handleFetchError from "../functions/handleFetchError";
import axios from "axios";

const DataContext = createContext({
  cartProducts: [],
  getProductCartQuantity: () => {},
  addOneToCart: () => {},
  removeOneFromCart: () => {},
  clearCart: () => {},
  getTotalCost: () => {},
  fetchProductsApi: () => {},
  fetchCategoriesApi: () => {},
});

export const DataProvider = ({ children }) => {
  const contextValue = {
    cartProducts: [],
    getProductCartQuantity,
    addOneToCart,
    removeOneFromCart,
    clearCart,
    getTotalCost,
    fetchProductsApi,
    fetchCategoriesApi,
  };
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // BACKEND API
  //useEffect(() => {
  const fetchProducts = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.get(
        `${import.meta.env.VITE_API_URL}/products`
      );
      setProducts(response.data);
    } catch (error) {
      handleFetchError(error, setError);
    } finally {
      setLoading(false);
    }
  };

  const fetchCategories = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.get(
        `${import.meta.env.VITE_API_URL}/categories`
      );
      setCategories(response.data);
    } catch (error) {
      handleFetchError(error, setError);
    } finally {
      setLoading(false);
    }
  };

  const handleFetchError = (error, setError) => {
    if (error.response) {
      console.error("Server Error:", error.response.data);
    } else if (error.request) {
      console.error("Network Error:", error.request);
    } else {
      console.error("Error:", error.message);
    }
    setError(error);
  };

  //   fetchProducts();
  //   fetchCategories();
  // }, []);

  return (
    <DataContext.Provider value={{ contextValue }}>
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => React.useContext(DataContext);
