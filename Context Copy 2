// src/context/DataContext.js
import React, { createContext, useState, useEffect, useContext } from "react";
import handleFetchError from "../functions/handleFetchError";
import axios from "axios";

export const DataContext = createContext();
//   {
//   cartProducts: [],
//   products: [],
//   getCartProductQuantity: () => {},
//   addOneToCart: () => {},
//   removeOneFromCart: () => {},
//   clearCart: () => {},
//   getTotalCost: () => {},
// }

export const DataProvider = ({ children }) => {
  const [cartProducts, setCartProducts] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchProductsApi = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await axios.get(
          `${import.meta.env.VITE_API_URL}/products`
        );
        setProducts(response.data);
      } catch (error) {
        handleFetchError(error);
      } finally {
        setLoading(false);
      }
    };

    fetchProductsApi();
  }, []);

  const getCartProductQuantity = (id) => {};

  const addOneToCart = (id) => {};

  const removeOneFromCart = () => {};

  const clearCart = () => {};

  const getTotalCost = () => {};

  // BACKEND API
  // const fetchProductsApi = async () => {
  //   setLoading(true);
  //   setError(null);
  //   try {
  //     const response = await axios.get(
  //       `${import.meta.env.VITE_API_URL}/products`
  //     );
  //     setProducts(response.data);
  //   } catch (error) {
  //     handleFetchError(error);
  //   } finally {
  //     setLoading(false);
  //   }
  // };

  // fetchProductsApi();

  // const contextValue = {
  //   cartItems: cartProducts,
  //   products: products,
  //   loading: loading,
  //   error: error,
  //   getCartProductQuantity,
  //   addOneToCart,
  //   removeOneFromCart,
  //   clearCart,
  //   getTotalCost,
  // };

  return (
    <DataContext.Provider
      value={{
        products,
        loading,
        error,
        getCartProductQuantity,
        addOneToCart,
        removeOneFromCart,
        clearCart,
        getTotalCost,
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

// export default DataProvider;
export const useData = () => React.useContext(DataContext);
